generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_HOST")
}

model User {
  id           Int        @id @default(autoincrement())
  email        String     @unique
  passwordHash String
  name         String?
  role         SystemRole @default(USER)

  isEmailVerified              Boolean   @default(false)
  emailVerificationToken       String?   @unique
  emailVerificationTokenExpire DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefreshToken RefreshToken[]
  Organization Organization[]
  Membership   Membership[]
  Invitation   Invitation[]
}

model RefreshToken {
  id        String  @id
  userId    Int
  tokenHash String  @unique
  revoked   Boolean @default(false)

  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  countOfMembers Int          @default(1)
  ownerId        Int
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  memberships    Membership[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Invitation     Invitation[]
}

model Membership {
  userId         Int
  organizationId Int
  role           TenantRole @default(MEMBER)

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

enum SystemRole {
  USER
  SUPPORT
  SUPER_ADMIN
}

enum TenantRole {
  MEMBER
  ADMIN
  OWNER
}

model Invitation {
  id             Int        @id @default(autoincrement())
  organizationId Int
  email          String
  role           TenantRole @default(MEMBER)
  token          String     @unique

  expiresAt  DateTime
  acceptedAt DateTime?

  createdByUserId Int
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User         @relation(fields: [createdByUserId], references: [id], onDelete: Cascade)
}
